#pragma once

#include <string>
#include <optional>
#include <vector>

namespace BCInputFileLibrary
{
    /////////////////////////////////////////////////////////////////////////////////
    // TARPTimestep
    /////////////////////////////////////////////////////////////////////////////////

    struct TARPTimestep
    {
        std::optional<size_t> id;
        double temperature{0};
        double humidity{0};
    };

    /////////////////////////////////////////////////////////////////////////////////
    // ASHRAEInside
    /////////////////////////////////////////////////////////////////////////////////

    struct ASHRAEInside
    {
        std::optional<size_t> id;
        double temperature{0};
        double humidity{0};
    };

    /////////////////////////////////////////////////////////////////////////////////
    // ASHRAEOutside
    /////////////////////////////////////////////////////////////////////////////////

    struct ASHRAEOutside
    {
        std::optional<size_t> id;
        double temperature{0};
        double humidity{0};
        double windSpeed{0};
    };

    /////////////////////////////////////////////////////////////////////////////////
    // FixedFilmCoefficient
    /////////////////////////////////////////////////////////////////////////////////

    struct FixedFilmCoefficient
    {
        std::optional<size_t> id;
        double temperature{0};
        double humidity{0};
        double fixedFilmCoefficient{0};
    };

    /////////////////////////////////////////////////////////////////////////////////
    // YazdanianKlems
    /////////////////////////////////////////////////////////////////////////////////

    struct YazdanianKlems
    {
        std::optional<size_t> id;
        double temperature{0};
        double humidity{0};
        double windSpeed{0};
        double windDirection{0};
    };

    /////////////////////////////////////////////////////////////////////////////////
    // Kimura
    /////////////////////////////////////////////////////////////////////////////////

    struct Kimura
    {
        std::optional<size_t> id;
        double temperature{0};
        double humidity{0};
        double windSpeed{0};
        double windDirection{0};
    };

    /////////////////////////////////////////////////////////////////////////////////
    // Montazeri
    /////////////////////////////////////////////////////////////////////////////////

    struct Montazeri
    {
        std::optional<size_t> id;
        double temperature{0};
        double humidity{0};
        double windSpeed{0};
        double windDirection{0};
    };

    /////////////////////////////////////////////////////////////////////////////////
    // ConvectionTimesteps
    /////////////////////////////////////////////////////////////////////////////////

    struct ConvectionTimesteps
    {
        std::vector<TARPTimestep> tarp;
        std::vector<ASHRAEInside> ashraeInside;
        std::vector<ASHRAEOutside> ashraeOutside;
        std::vector<FixedFilmCoefficient> fixedFilmCoefficient;
        std::vector<YazdanianKlems> yazdanianKlems;
        std::vector<Kimura> kimura;
        std::vector<Montazeri> montazeri;
    };

    /////////////////////////////////////////////////////////////////////////////////
    // FixedRadiationCoefficient
    /////////////////////////////////////////////////////////////////////////////////

    struct FixedRadiation
    {
        std::optional<size_t> id;
        double temperature{0};
        double hr{0};
    };

    /////////////////////////////////////////////////////////////////////////////////
    // BlackBodyRadiation
    /////////////////////////////////////////////////////////////////////////////////

    struct BlackBodyRadiation
    {
        std::optional<size_t> id;
        double temperature{0};
        double emissivity{0};
    };

    /////////////////////////////////////////////////////////////////////////////////
    // RadiationTimesteps
    /////////////////////////////////////////////////////////////////////////////////

    struct RadiationTimesteps
    {
        std::vector<FixedRadiation> fixedRadiation;
        std::vector<BlackBodyRadiation> blackBodyRadiation;
    };

    /////////////////////////////////////////////////////////////////////////////////
    // HeatFlux
    /////////////////////////////////////////////////////////////////////////////////

    struct HeatFlux
    {
        std::optional<size_t> id;
        double heatFlux{0};
    };

    /////////////////////////////////////////////////////////////////////////////////
    // SolarRadiation
    /////////////////////////////////////////////////////////////////////////////////

    struct SolarRadiation
    {
        std::optional<size_t> id;
        double solarRadiation{0};
    };

    /////////////////////////////////////////////////////////////////////////////////
    // FixedTemperature
    /////////////////////////////////////////////////////////////////////////////////

    struct FixedTemperature
    {
        std::optional<size_t> id;
        double temperature{0};
    };

    /////////////////////////////////////////////////////////////////////////////////
    // FixedHumidity
    /////////////////////////////////////////////////////////////////////////////////

    struct FixedHumidity
    {
        std::optional<size_t> id;
        double humidity{0};
    };

    /////////////////////////////////////////////////////////////////////////////////
    // BoundaryConditionTimestep
    /////////////////////////////////////////////////////////////////////////////////
    struct BoundaryConditionTimestep
    {

        void loadFromXMLFile(const std::string & fileName);
        void loadFromXMLString(const std::string & xmlString);

        bool isLoadSuccesful() const;

        //! \brief In case loading failed this is showing error message
        [[nodiscard]] std::string errorMessage() const;

        std::string version;
        std::string name;

        ConvectionTimesteps convection;
        RadiationTimesteps radiation;

        std::vector<HeatFlux> heatFlux;
        std::vector<SolarRadiation> solarRadiation;
        std::vector<FixedTemperature> temperature;
        std::vector<FixedHumidity> humidity;

    private:
        std::string m_ErrorMessage;
    };

}   // namespace BCInputFileLibrary
